class MyClass{
    MyClass(){}
    var unwinded=()=>{
        printDouble(1.1);
    };
}
valuetype class MyClass2{
    MyClass2(){}
    var unwinded=()=>{
        printDouble(2.1);
    };
}
class MyClass3{
    MyClass3(){}
    var unwinded=()=>{
        autounwinding(var a=new MyClass()){
            printDouble(3.1);
        }
    };
}
function main(){
    autounwinding(var a=new MyClass();var b:MyClass2;var c=new MyClass3()){
    }
};


function printDouble(v:double):void{
    native
};
function printI32(v:int):void{
    native
};
function printI8(v:byte):void{
    native
};

extension function toString(this int v):void{
    printI32(v);
}









valuetype class bool{
     operator == ( v : bool ) : bool { native } ;
     operator || ( v : bool ) : bool { native } ;
     operator && ( v : bool ) : bool { native } ;
}

valuetype class byte{
    operator + ( v : byte ) : byte { native } ;
    operator - ( v : byte ) : byte { native } ;
    operator * ( v : byte ) : byte { native } ;
    operator / ( v : byte ) : byte { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : byte ) : bool { native } ;
    operator <= ( v : byte ) : bool { native } ;
    operator > ( v : byte ) : bool { native } ;
    operator >= ( v : byte ) : bool { native } ;
    operator == ( v : byte ) : bool { native } ;
}

valuetype class short{
    operator + ( v : short ) : short { native } ;
    operator - ( v : short ) : short { native } ;
    operator * ( v : short ) : short { native } ;
    operator / ( v : short ) : short { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : short ) : bool { native } ;
    operator <= ( v : short ) : bool { native } ;
    operator > ( v : short ) : bool { native } ;
    operator >= ( v : short ) : bool { native } ;
    operator == ( v : short ) : bool { native } ;
}

valuetype class int{
    operator + ( v : int ) : int { native } ;
    operator - ( v : int ) : int { native } ;
    operator * ( v : int ) : int { native } ;
    operator / ( v : int ) : int { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : int ) : bool { native } ;
    operator <= ( v : int ) : bool { native } ;
    operator > ( v : int ) : bool { native } ;
    operator >= ( v : int ) : bool { native } ;
    operator == ( v : int ) : bool { native } ;
}

valuetype class long{
    operator + ( v : long ) : long { native } ;
    operator - ( v : long ) : long { native } ;
    operator * ( v : long ) : long { native } ;
    operator / ( v : long ) : long { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : long ) : bool { native } ;
    operator <= ( v : long ) : bool { native } ;
    operator > ( v : long ) : bool { native } ;
    operator >= ( v : long ) : bool { native } ;
    operator == ( v : long ) : bool { native } ;
}

valuetype class double{
    operator + ( v : double ) : double { native } ;
    operator - ( v : double ) : double { native } ;
    operator * ( v : double ) : double { native } ;
    operator / ( v : double ) : double { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : double ) : bool { native } ;
    operator <= ( v : double ) : bool { native } ;
    operator > ( v : double ) : bool { native } ;
    operator >= ( v : double ) : bool { native } ;
    operator == ( v : double ) : bool { native } ;
}

valuetype class object{}