var i=0;
class MyClass1{
    var v:int;
    MyClass1(){
        v=i;
        i++;
    }
    function p(){
        printI32(v);
    };
}
valuetype class MyClass2{
    var v:int=159;
    MyClass2(){}
    function p(){
        printI32(v);
    };
}
function main():void{
    var arr1={[1,2,3]};
    var arr2={[4,5,6]};
    var arr3={[arr1,arr2]};
    printI32(arr3[1][2]);

    var arr4={[{[7,8,9]},{[10,11,12]}]};
    printI32(arr4[1][2]);

    var arr5={[new MyClass1(),new MyClass1()]};
    arr5[1].p();

    var m2:MyClass2;
    var arr6={[m2,m2]};
    arr6[1].p();
};















function printDouble(v:double):void{
    native
};
function printI32(v:int):void{
    native
};
function printI8(v:byte):void{
    native
};

extension function toString(this int v):void{
    printI32(v);
}







class NullPointerException{
    NullPointerException(){}
}
class ArithmeticException{
    ArithmeticException(){}
}
class CastException{
    CastException(){}
}
class ArrayIndexOutOfBoundsException{
    ArrayIndexOutOfBoundsException(){}
}



valuetype class bool{
     operator == ( v : bool ) : bool { native } ;
     operator || ( v : bool ) : bool { native } ;
     operator && ( v : bool ) : bool { native } ;
}

valuetype class byte{
    operator + ( v : byte ) : byte { native } ;
    operator - ( v : byte ) : byte { native } ;
    operator * ( v : byte ) : byte { native } ;
    operator / ( v : byte ) : byte { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : byte ) : bool { native } ;
    operator <= ( v : byte ) : bool { native } ;
    operator > ( v : byte ) : bool { native } ;
    operator >= ( v : byte ) : bool { native } ;
    operator == ( v : byte ) : bool { native } ;
}

valuetype class short{
    operator + ( v : short ) : short { native } ;
    operator - ( v : short ) : short { native } ;
    operator * ( v : short ) : short { native } ;
    operator / ( v : short ) : short { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : short ) : bool { native } ;
    operator <= ( v : short ) : bool { native } ;
    operator > ( v : short ) : bool { native } ;
    operator >= ( v : short ) : bool { native } ;
    operator == ( v : short ) : bool { native } ;
}

valuetype class int{
    operator + ( v : int ) : int { native } ;
    operator - ( v : int ) : int { native } ;
    operator * ( v : int ) : int { native } ;
    operator / ( v : int ) : int { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : int ) : bool { native } ;
    operator <= ( v : int ) : bool { native } ;
    operator > ( v : int ) : bool { native } ;
    operator >= ( v : int ) : bool { native } ;
    operator == ( v : int ) : bool { native } ;
}

valuetype class long{
    operator + ( v : long ) : long { native } ;
    operator - ( v : long ) : long { native } ;
    operator * ( v : long ) : long { native } ;
    operator / ( v : long ) : long { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : long ) : bool { native } ;
    operator <= ( v : long ) : bool { native } ;
    operator > ( v : long ) : bool { native } ;
    operator >= ( v : long ) : bool { native } ;
    operator == ( v : long ) : bool { native } ;
}

valuetype class double{
    operator + ( v : double ) : double { native } ;
    operator - ( v : double ) : double { native } ;
    operator * ( v : double ) : double { native } ;
    operator / ( v : double ) : double { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : double ) : bool { native } ;
    operator <= ( v : double ) : bool { native } ;
    operator > ( v : double ) : bool { native } ;
    operator >= ( v : double ) : bool { native } ;
    operator == ( v : double ) : bool { native } ;
}

valuetype class object{}