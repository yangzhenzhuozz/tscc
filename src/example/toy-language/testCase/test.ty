var a=0.0;
class MyClass{
    MyClass(){
        a++;
        if(a==3.0){
            var arr:int[]=new int[3];
            var obj=(object)arr;
            if(obj instanceof int[]){
                printI32(3/((int[])obj)[2]);
            }
        }
    }
    var unwinded=()=>{
        printDouble(1.1);
    };
}
function main():void{
    try{
        autounwinding(var a=new MyClass();var b=new MyClass();var c=new MyClass()){

        }
    }
    catch(e:double){
        printDouble(e);
    }
    catch(e:NullPointerException){
        printDouble(5.1);
    }
    catch(e:ArithmeticException){
        printDouble(6.1);
    }
    catch(e:CastException){
        printDouble(7.1);
    }
    catch(e:ArrayIndexOutOfBoundsException){
        printDouble(8.1);
    }
};















function printDouble(v:double):void{
    native
};
function printI32(v:int):void{
    native
};
function printI8(v:byte):void{
    native
};

extension function toString(this int v):void{
    printI32(v);
}







class NullPointerException{
    NullPointerException(){}
}
class ArithmeticException{
    ArithmeticException(){}
}
class CastException{
    CastException(){}
}
class ArrayIndexOutOfBoundsException{
    ArrayIndexOutOfBoundsException(){}
}



valuetype class bool{
     operator == ( v : bool ) : bool { native } ;
     operator || ( v : bool ) : bool { native } ;
     operator && ( v : bool ) : bool { native } ;
}

valuetype class byte{
    operator + ( v : byte ) : byte { native } ;
    operator - ( v : byte ) : byte { native } ;
    operator * ( v : byte ) : byte { native } ;
    operator / ( v : byte ) : byte { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : byte ) : bool { native } ;
    operator <= ( v : byte ) : bool { native } ;
    operator > ( v : byte ) : bool { native } ;
    operator >= ( v : byte ) : bool { native } ;
    operator == ( v : byte ) : bool { native } ;
}

valuetype class short{
    operator + ( v : short ) : short { native } ;
    operator - ( v : short ) : short { native } ;
    operator * ( v : short ) : short { native } ;
    operator / ( v : short ) : short { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : short ) : bool { native } ;
    operator <= ( v : short ) : bool { native } ;
    operator > ( v : short ) : bool { native } ;
    operator >= ( v : short ) : bool { native } ;
    operator == ( v : short ) : bool { native } ;
}

valuetype class int{
    operator + ( v : int ) : int { native } ;
    operator - ( v : int ) : int { native } ;
    operator * ( v : int ) : int { native } ;
    operator / ( v : int ) : int { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : int ) : bool { native } ;
    operator <= ( v : int ) : bool { native } ;
    operator > ( v : int ) : bool { native } ;
    operator >= ( v : int ) : bool { native } ;
    operator == ( v : int ) : bool { native } ;
}

valuetype class long{
    operator + ( v : long ) : long { native } ;
    operator - ( v : long ) : long { native } ;
    operator * ( v : long ) : long { native } ;
    operator / ( v : long ) : long { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : long ) : bool { native } ;
    operator <= ( v : long ) : bool { native } ;
    operator > ( v : long ) : bool { native } ;
    operator >= ( v : long ) : bool { native } ;
    operator == ( v : long ) : bool { native } ;
}

valuetype class double{
    operator + ( v : double ) : double { native } ;
    operator - ( v : double ) : double { native } ;
    operator * ( v : double ) : double { native } ;
    operator / ( v : double ) : double { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : double ) : bool { native } ;
    operator <= ( v : double ) : bool { native } ;
    operator > ( v : double ) : bool { native } ;
    operator >= ( v : double ) : bool { native } ;
    operator == ( v : double ) : bool { native } ;
}

valuetype class object{}