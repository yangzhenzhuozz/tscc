recursive value 即 var a=xxx,如果在推导a的类型的时候又出现了对a的使用，则表示这是一个recursive value,拒绝执行
函数有个标志表示是否需要this

第零遍扫描把所有的class定义转换成user_type
第一遍扫描得到基础类型，本次以后的扫描遇到模板声明，把所有的模板类型<T>注册为用户自定义类型，结束作用域后删除，需要给lexer增加移除功能
第二遍得到推导类型
第三遍扫描闭包捕获
第四遍得到语法树(可以得到非泛型的语法错误)

然后交给后端，后端检测所有的泛型实例化，能正确生成则生成代码，否则报错
这样就能在编译期间报出所有错误

在使用反射实例化泛型的时候(使用runtime的magic)，如果实例化失败,由runtime抛出异常


//测试类型推导
var a:Map;
var b:(Map);
var c:Map<int,int>;
var d:()=>int;
var e:(a:int)=>int;
var f:<K,V>()=>int;
var g:<K,V>(a:K,b:V)=>int;
var h:int[][];
var i:Map<int,int>[][];
var t:(int)[];
var j:((a:int)=>int)[][];
var k:(<K,V>(a:K,b:V)=>int)[][];
var l:<K,V>(a:K,b:V)=><M,N>(a:K,b:V)=>M;
var m=new int[][][][]();
function n():int{};
function o(a:int):int{};
function p(a:int){};
function q(a:int,b:int):int{
    var a:Map;
    var b:(Map);
    var c:Map<int,int>;
    var d:()=>int;
    var e:(a:int)=>int;
    var f:<K,V>()=>int;
    var g:<K,V>(a:K,b:V)=>int;
    var h:int[][];
    var i:Map<int,int>[][];
    var t:(int)[];
    var j:((a:int)=>int)[][];
    var k:(<K,V>(a:K,b:V)=>int)[][];
    var l:<K,V>(a:K,b:V)=><M,N>(a:K,b:V)=>M;
    var m=new int[][][][]();
    function n():int{};
    function o(a:int):int{};
    function p(a:int){};
};
var a1=a2;
var a2=a3;
var a3=a;
var b1=b2;
var b2=b3;
var b3=b1;
var c1=c;
var d1=e1;//测试点:使用了后定义的变量
var e1=e2+e3;//测试点1:通过表达式推导类型(需要连续推导) 测试点2:使用了后定义的变量
var e2=e3+e4;//测试点:表达式类型推导
var e3=a;
var e4=5;
class Map<H,I>{
    var a:Map;
    var b:(Map);
    var c:Map<int,int>;
    var d:()=>int;
    var e:(a:int)=>int;
    var f:<K,V>()=>int;
    var g:<K,V>(a:K,b:V)=>int;
    var h:int[][];
    var i:Map<int,int>[][];
    var t:(int)[];
    var j:((a:int)=>int)[][];
    var k:(<K,V>(a:K,b:V)=>int)[][];
    var l:<K,V>(a:K,b:V)=><M,N>(a:K,b:V)=>M;
    var m=new int[][][][]();
    function n():int{};
    function o(a:int):int{};
    function p(a:int){};
    function q(a:int,b:int):int{
        var a:Map;
        var b:(Map);
        var c:Map<int,int>;
        var d:()=>int;
        var e:(a:int)=>int;
        var f:<K,V>()=>int;
        var g:<K,V>(a:K,b:V)=>int;
        var h:int[][];
        var i:Map<int,int>[][];
        var t:(int)[];
        var j:((a:int)=>int)[][];
        var k:(<K,V>(a:K,b:V)=>int)[][];
        var l:<K,V>(a:K,b:V)=><M,N>(a:K,b:V)=>M;
        var m=new int[][][][]();
        function n():int{};
        function o(a:int):int{};
        function p(a:int){};
        var a1=a2;
        var a2=a3;
        var a3=a;
        var b1=b2;
        var b2=b3;
        var b3=b1;
        var c1=c;
        var d1=a+b;
    };
    var a1=a2;
    var a2=a3;
    var a3=a;
    var b1=b2;
    var b2=b3;
    var b3=b1;
    var c1=c;
    var d1=e1;//测试点:使用了后定义的变量
    var e1=e2+e3;//测试点1:通过表达式推导类型(需要连续推导) 测试点2:使用了后定义的变量
    var e2=e3+e4;//测试点:表达式类型推导
    var e3=a;
    var e4=5;
}
class Set<H>{}



//测试循环继承
class A extends B{

}
class B extends A{
    
}

//测试值类型直接循环包含
valueType class A {
    var value:A;
}

//测试值类型间接循环包含
valueType class A {
    var value:B;
}
valueType class B {
    var value:A;
}